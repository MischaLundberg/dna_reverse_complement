package dnarevcmpl3;

import static org.junit.Assert.*;

import java.awt.AWTException;
import java.awt.BorderLayout;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.junit.rules.ExternalResource;

import com.sun.xml.internal.ws.policy.spi.AssertionCreationException;

import junit.framework.AssertionFailedError;

import org.junit.Rule;
import org.junit.Test;

public class ReverseComplementAndCombineTest2 {

	@Test
	public void testReverseComplementAndCombine() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetSequence() {
		ReverseComplementAndCombine revcmp = new ReverseComplementAndCombine();
		String[] seq1 = new String[4];
		seq1[0] = ">testString";
		seq1[1] = "NNNNNNTNNNNTGATTACGCCAGCTATTTAGGTGACACTATAGAATACTCAAGCTATGCATCCAACGCGTTGGGAGCTCTCCCATATGGTCGACCTGCAGGCGGCCGCGAATTCA";
		seq1[2] = "CTAGTGATTCCAGGTTAAAACTGTGAACCAAGACAATATACTTAAACACAATCTACCAACTGAATATTGTCATTGCAAACAAAGTAAATCCATATTCAATGTGATTTGGCTTAATTTCTATGCACACTAATGTTCTCAGGTTCATATTCTTATATAAAGGCAATAAGTAAAACCATTCACCTATTTGTTCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAATTTTTTTTCCTTTTTTTTTTTTT";
		seq1[3] = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";

		String[] seq2 = new String[2];
		seq2[0] = ">testString";
		seq2[1] = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";

		String[] seq3 = new String[1];
		seq3[0] = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";

		String[] seq4 = new String[3];
		seq4[0] = "NNNNNNTNNNNTGATTACGCCAGCTATTTAGGTGACACTATAGAATACTCAAGCTATGCATCCAACGCGTTGGGAGCTCTCCCATATGGTCGACCTGCAGGCGGCCGCGAATTCA";
		seq4[1] = "CTAGTGATTCCAGGTTAAAACTGTGAACCAAGACAATATACTTAAACACAATCTACCAACTGAATATTGTCATTGCAAACAAAGTAAATCCATATTCAATGTGATTTGGCTTAATTTCTATGCACACTAATGTTCTCAGGTTCATATTCTTATATAAAGGCAATAAGTAAAACCATTCACCTATTTGTTCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAATTTTTTTTCCTTTTTTTTTTTTT";
		seq4[2] = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";

		String result1and4 = "NNNNNNTNNNNTGATTACGCCAGCTATTTAGGTGACACTATAGAATACTCAAGCTATGCATCCAACGCGTTGGGAGCTCTCCCATATGGTCGACCTGCAGGCGGCCGCGAATTCACTAGTGATTCCAGGTTAAAACTGTGAACCAAGACAATATACTTAAACACAATCTACCAACTGAATATTGTCATTGCAAACAAAGTAAATCCATATTCAATGTGATTTGGCTTAATTTCTATGCACACTAATGTTCTCAGGTTCATATTCTTATATAAAGGCAATAAGTAAAACCATTCACCTATTTGTTCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAATTTTTTTTCCTTTTTTTTTTTTTAGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
		String result2 = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
		String result3 = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
		
		String test1 = revcmp.getSequence(seq1, 1);
		String test2 = revcmp.getSequence(seq2, 1);
		String test3 = revcmp.getSequence(seq3, 0);
		String test4 = revcmp.getSequence(seq4, 0);
		
		assertEquals(result1and4, test1);
		assertEquals(result2, test2);
		assertEquals(result3, test3);
		assertEquals(result1and4, test4);
	}


	@Test(expected = java.io.FileNotFoundException.class)
	public void testOpenFile(){
		ReverseComplementAndCombine revcmp = new ReverseComplementAndCombine();
		
		File temp;
		/*String[] expected1 = {};
		String[] expected2 = {};
		String[] test1 = {};
		String[] test2 = {};*/
		try {
			temp = File.createTempFile("test_R", ".txt");
			String outputPath = temp.getAbsolutePath();
			BufferedWriter bw = new BufferedWriter(new FileWriter(temp));
			bw.write(">test\nAGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG");
			bw.close();
			assertTrue(temp.exists());
			String[] expected1 = new String [2];
			expected1[0] = ">test_R\n";
			expected1[1] = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
			String[] test1 = revcmp.openFile(outputPath, "_R");
			System.out.println("testOpenFile: "+test1[0]+test1[1]);
			System.out.println("expected: "+expected1[0]+expected1[1]);
			
			
			temp = File.createTempFile("test-R", ".txt");
			outputPath = temp.getAbsolutePath();
			bw = new BufferedWriter(new FileWriter(temp));
			bw.write("AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG");
			bw.close();
			assertTrue(temp.exists());
			String[] expected2 = new String [2];
			expected2[0] = ">"+temp.getName().replaceAll(".txt", "").toString()+"\n";
			expected2[1] = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
			String[] test2 = revcmp.openFile(outputPath, "_R");		
			System.out.println("testOpenFile: "+test2[0]+test2[1]);
			System.out.println("expected: "+expected2[0]+expected2[1]);
			
			
			temp = File.createTempFile("test-R", ".txt");
			outputPath = temp.getAbsolutePath();
			bw = new BufferedWriter(new FileWriter(temp));
			bw.write(">test_R\nAGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG");
			bw.close();
			assertTrue(temp.exists());
			String[] expected3 = new String [2];
			expected3[0] = ">test_R\n";
			expected3[1] = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
			String[] test3 = revcmp.openFile(outputPath, "_R");		
			System.out.println("testOpenFile: "+test3[0]+test3[1]);
			System.out.println("expected: "+expected3[0]+expected3[1]);
			
		
			assertArrayEquals(expected1, test1);
			assertArrayEquals(expected2, test2);
			assertArrayEquals(expected3, test3);
			/*     
			temp = File.createTempFile("test_R", ".txt");
			outputPath = temp.getAbsolutePath();
			temp.delete();
			expect(revcmp.openFile(outputPath, "_R")).andThrow(IOException.class);
			String[] test4 = revcmp.openFile(outputPath, "_R");	
			*/
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			fail(e.getMessage());
		}
		
		
		
		
		

		
	}

	
	@Test
	public void testisFastaFormat() {
		ReverseComplementAndCombine revcmp = new ReverseComplementAndCombine();
		
		String seq1 = ">test ";
		String seq2 = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
		String seq3 = ">test"
				+ "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
		
		boolean result1 = true;
		boolean result2 = false;
		boolean result3 = true;
		
		boolean test1 = revcmp.isFastaFormat(seq1);
		boolean test2 = revcmp.isFastaFormat(seq2);
		boolean test3 = revcmp.isFastaFormat(seq3);
		
		assertEquals(result1, test1);
		assertEquals(result2, test2);
		assertEquals(result3, test3);
	}
	
	
	@Test
	public void testRevcmpl() {
		ReverseComplementAndCombine revcmp = new ReverseComplementAndCombine();

		String seq1 = "NNNNNNTNNNNTGATTACGCCAGCTATTTAGGTGACACTATAGAATACTCAAGCTATGCATCCAACGCGTTGGGAGCTCTCCCATATGGTCGACCTGCAGGCGGCCGCGAATTCACTAGTGATTCCAGGTTAAAACTGTGAACCAAGACAATATACTTAAACACAATCTACCAACTGAATATTGTCATTGCAAACAAAGTAAATCCATATTCAATGTGATTTGGCTTAATTTCTATGCACACTAATGTTCTCAGGTTCATATTCTTATATAAAGGCAATAAGTAAAACCATTCACCTATTTGTTCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAATTTTTTTTCCTTTTTTTTTTTTTAGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
		String seq2 = "AGGGGTAAAAAAAAAACCCCCCCACCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCTTTTTGGCCCCGGGGCCCCCCTTTTTGGGGGAAAAAAAAGGGGGGGGGGCCAAGGGGCCCCCTTTTTCGGGGGGGGGCCAAAAACCCCTTTTTTTGAAAAATGGGCCCAAAAAAAAAAAAGGGGGGGGGGGGGGGGTTTTCAAAAGGGGGCCCCCCCCCGGGGGGGGGAAAACCCTTTTCCCCCGGGGGGATTTTTCCTACCCCCCCCGGGGGGGACCCGGGGGCCCCCCCCAAGAGGGGGGGGGGGGGCCCCTTTTTTGTTTTTAGAACCCCCCGGGAATTTCTCAAAAAAAAACTCTCTGTGGGGGCCCTTNAAAAAATANGGGNTGTGGTAAAAGGGGGGCCCCCGGTAGATAGNAAATANGGGGGNAGCCCCCCGAAAAGGGCCCCCCCCGGGGCCCCCCTTTAATACCACCCCAAAACTTTTTTCCTCACCCCCCCCCCGGGGGGTTTTTTGTCCCTNTTAGAGGGGGGGGGAATGGACCCCCCCACCNNTCTTTTTTTGTCGTAGTTAGTGGTAGTAAAAANNTTCAAATCAAATAGGGGGGNANCCAGAGGTTGGGCGNATAAATTCCTTTAAATAGAAAATAATATAGGGGGATTTCTTTGTTAATATAGTAGTCCCCCCCAAGGGGGAAGACCCCCCCAANNCCTCCTTTTGGGGGGGAAATCAAAAAAAATATTCTTTTTTATNTCGGGCAAACTTACCCTAAGGAAAGCGATCAAACAAATTTAGAGATACCCCCCTNACNNNGGGGGATTATTATGNTTTTTAAGAAACCACGNAAAAAANTCNNGG";
		String seq3 = "RYMKBDHVSWU";
		String seq4 = "E";
				
		String result1 = "CCNNGANTTTTTTNCGTGGTTTCTTAAAAANCATAATAATCCCCCNNNGTNAGGGGGGTATCTCTAAATTTGTTTGATCGCTTTCCTTAGGGTAAGTTTGCCCGANATAAAAAAGAATATTTTTTTTGATTTCCCCCCCAAAAGGAGGNNTTGGGGGGGTCTTCCCCCTTGGGGGGGACTACTATATTAACAAAGAAATCCCCCTATATTATTTTCTATTTAAAGGAATTTATNCGCCCAACCTCTGGNTNCCCCCCTATTTGATTTGAANNTTTTTACTACCACTAACTACGACAAAAAAAGANNGGTGGGGGGGTCCATTCCCCCCCCCTCTAANAGGGACAAAAAACCCCCCGGGGGGGGGGTGAGGAAAAAAGTTTTGGGGTGGTATTAAAGGGGGGCCCCGGGGGGGGCCCTTTTCGGGGGGCTNCCCCCNTATTTNCTATCTACCGGGGGCCCCCCTTTTACCACANCCCNTATTTTTTNAAGGGCCCCCACAGAGAGTTTTTTTTTGAGAAATTCCCGGGGGGTTCTAAAAACAAAAAAGGGGCCCCCCCCCCCCCTCTTGGGGGGGGCCCCCGGGTCCCCCCCGGGGGGGGTAGGAAAAATCCCCCCGGGGGAAAAGGGTTTTCCCCCCCCCGGGGGGGGGCCCCCTTTTGAAAACCCCCCCCCCCCCCCCTTTTTTTTTTTTGGGCCCATTTTTCAAAAAAAGGGGTTTTTGGCCCCCCCCCGAAAAAGGGGGCCCCTTGGCCCCCCCCCCTTTTTTTTCCCCCAAAAAGGGGGGCCCCGGGGCCAAAAAGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGTGGGGGGGTTTTTTTTTTACCCCTAAAAAAAAAAAAAGGAAAAAAAATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAACAAATAGGTGAATGGTTTTACTTATTGCCTTTATATAAGAATATGAACCTGAGAACATTAGTGTGCATAGAAATTAAGCCAAATCACATTGAATATGGATTTACTTTGTTTGCAATGACAATATTCAGTTGGTAGATTGTGTTTAAGTATATTGTCTTGGTTCACAGTTTTAACCTGGAATCACTAGTGAATTCGCGGCCGCCTGCAGGTCGACCATATGGGAGAGCTCCCAACGCGTTGGATGCATAGCTTGAGTATTCTATAGTGTCACCTAAATAGCTGGCGTAATCANNNNANNNNNN";
		String result2 = "CCNNGANTTTTTTNCGTGGTTTCTTAAAAANCATAATAATCCCCCNNNGTNAGGGGGGTATCTCTAAATTTGTTTGATCGCTTTCCTTAGGGTAAGTTTGCCCGANATAAAAAAGAATATTTTTTTTGATTTCCCCCCCAAAAGGAGGNNTTGGGGGGGTCTTCCCCCTTGGGGGGGACTACTATATTAACAAAGAAATCCCCCTATATTATTTTCTATTTAAAGGAATTTATNCGCCCAACCTCTGGNTNCCCCCCTATTTGATTTGAANNTTTTTACTACCACTAACTACGACAAAAAAAGANNGGTGGGGGGGTCCATTCCCCCCCCCTCTAANAGGGACAAAAAACCCCCCGGGGGGGGGGTGAGGAAAAAAGTTTTGGGGTGGTATTAAAGGGGGGCCCCGGGGGGGGCCCTTTTCGGGGGGCTNCCCCCNTATTTNCTATCTACCGGGGGCCCCCCTTTTACCACANCCCNTATTTTTTNAAGGGCCCCCACAGAGAGTTTTTTTTTGAGAAATTCCCGGGGGGTTCTAAAAACAAAAAAGGGGCCCCCCCCCCCCCTCTTGGGGGGGGCCCCCGGGTCCCCCCCGGGGGGGGTAGGAAAAATCCCCCCGGGGGAAAAGGGTTTTCCCCCCCCCGGGGGGGGGCCCCCTTTTGAAAACCCCCCCCCCCCCCCCTTTTTTTTTTTTGGGCCCATTTTTCAAAAAAAGGGGTTTTTGGCCCCCCCCCGAAAAAGGGGGCCCCTTGGCCCCCCCCCCTTTTTTTTCCCCCAAAAAGGGGGGCCCCGGGGCCAAAAAGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGTGGGGGGGTTTTTTTTTTACCCCT";
		String result3 = "AWSBDHVMKRY";
		
		String test1 = revcmp.revcmpl(seq1);
		String test2 = revcmp.revcmpl(seq2);
		String test3 = revcmp.revcmpl(seq3);
		String test4 = revcmp.revcmpl(seq1.toLowerCase());
		String test5 = revcmp.revcmpl(seq2.toLowerCase());
		String test6 = revcmp.revcmpl(seq3.toLowerCase());
		String test7 = revcmp.revcmpl(seq4);
		
		assertEquals(result1, test1);
		assertEquals(result2, test2);
		assertEquals(result3, test3);
		assertEquals(result1.toLowerCase(), test4);
		assertEquals(result2.toLowerCase(), test5);
		assertEquals(result3.toLowerCase(), test6);
		assertEquals("ERROR", test7);
	}

	@Test
	public void testSetDefaultButton() throws AWTException {
		fail("Not yet implemented");
		/*ReverseComplementAndCombine revcmp = new ReverseComplementAndCombine();
		Robot bot = new Robot();
		bot.mouseMove(10,10);
		bot.mousePress(InputEvent.BUTTON1_MASK);*/
		/*boolean button_state = revcmp.getRootPane()..getDefaultButton('clear');
		getRootPane().setDefaultButton(clear);
	    getRootPane().setDefaultButton(revcmplBtn);
	    buttonPanel.add(revcmplBtn, BorderLayout.LINE_START);*/
	    /*
	     * Robot bot = new Robot();
bot.mouseMove(10,10);
bot.mousePress(InputEvent.BUTTON1_MASK);
//add time between press and release or the input event system may 
//not think it is a click
try{Thread.sleep(250);}catch(InterruptedException e){}
bot.mouseRelease(InputEvent.BUTTON1_MASK);
	     */
	}

	@Test
	public void testActionPerformed() {
		fail("Not yet implemented");
	}

	@Test
	public void testMain() {
		fail("Not yet implemented");
	}

}
